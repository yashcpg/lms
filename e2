Microsoft.EntityFrameworkCore.DbUpdateException: An error occurred while saving the entity changes. See the inner exception for details.
 ---> Npgsql.PostgresException (0x80004005): 23502: null value in column "ManagerId" of relation "LeaveRequests" violates not-null constraint

DETAIL: Detail redacted as it may contain sensitive data. Specify 'Include Error Detail' in the connection string to include this information.
   at Npgsql.Internal.NpgsqlConnector.ReadMessageLong(Boolean async, DataRowLoadingMode dataRowLoadingMode, Boolean readingNotifications, Boolean isReadingPrependedMessage)
   at System.Runtime.CompilerServices.PoolingAsyncValueTaskMethodBuilder`1.StateMachineBox`1.System.Threading.Tasks.Sources.IValueTaskSource<TResult>.GetResult(Int16 token)


Here is the complete code for LeaveRequestService and the LeaveRequestController, with fixes to address the issue with the ManagerId being null, and ensuring that the ManagerId is properly handled.

LeaveRequestService - Handling Leave Request Logic

This service handles the creation, approval, rejection, and fetching of leave requests. It will ensure that the ManagerId is properly handled and can be assigned as needed.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using lms.DTO;
using lms.Models;
using Microsoft.EntityFrameworkCore;

namespace lms.Services
{
    public class LeaveRequestService
    {
        private readonly ApplicationDbContext _context;

        public LeaveRequestService(ApplicationDbContext context)
        {
            _context = context;
        }

        // Create a new leave request
        public async Task<LeaveRequest> CreateLeaveRequestAsync(string userId, LeaveRequestCreateDto leaveRequestDto)
        {
            // Check if the leave dates are in the future
            if (leaveRequestDto.StartDate < DateTime.Now)
            {
                throw new InvalidOperationException("Cannot apply for leave in the past.");
            }

            // Optionally, you can assign the manager here. This could be based on the user's department or other logic
            var employee = await _context.Users.FirstOrDefaultAsync(u => u.Id == userId);
            if (employee == null)
            {
                throw new InvalidOperationException("Employee not found.");
            }

            // Assuming you want to leave the ManagerId null for now, you can set it later
            var leaveRequest = new LeaveRequest
            {
                UserId = userId,
                LeaveTypeId = leaveRequestDto.LeaveTypeId,
                StartDate = leaveRequestDto.StartDate,
                EndDate = leaveRequestDto.EndDate,
                Reason = leaveRequestDto.Reason,
                Status = "Pending",  // Default status is Pending
                CreatedAt = DateTime.UtcNow,
                TotalDays = (leaveRequestDto.EndDate - leaveRequestDto.StartDate).Days + 1,  // Total leave days
                ManagerId = null // This can be assigned later, such as during approval
            };

            _context.LeaveRequests.Add(leaveRequest);
            await _context.SaveChangesAsync();

            return leaveRequest;
        }

        // Approve leave request
        public async Task<LeaveRequest> ApproveLeaveRequestAsync(int leaveRequestId, string managerId)
        {
            var leaveRequest = await _context.LeaveRequests.FindAsync(leaveRequestId);

            if (leaveRequest == null)
            {
                throw new ArgumentException("Leave request not found");
            }

            if (leaveRequest.Status != "Pending")
            {
                throw new InvalidOperationException("Only pending requests can be approved.");
            }

            leaveRequest.Status = "Approved";
            leaveRequest.ManagerId = managerId;  // Set the manager who approved
            leaveRequest.DecisionDate = DateTime.UtcNow;  // Set the decision date

            await _context.SaveChangesAsync();

            return leaveRequest;
        }

        // Reject leave request
        public async Task<LeaveRequest> RejectLeaveRequestAsync(int leaveRequestId, string managerId)
        {
            var leaveRequest = await _context.LeaveRequests.FindAsync(leaveRequestId);

            if (leaveRequest == null)
            {
                throw new ArgumentException("Leave request not found");
            }

            if (leaveRequest.Status != "Pending")
            {
                throw new InvalidOperationException("Only pending requests can be rejected.");
            }

            leaveRequest.Status = "Rejected";
            leaveRequest.ManagerId = managerId;  // Set the manager who rejected
            leaveRequest.DecisionDate = DateTime.UtcNow;  // Set the decision date

            await _context.SaveChangesAsync();

            return leaveRequest;
        }

        // Get leave requests for a specific employee
        public async Task<List<LeaveRequest>> GetLeaveRequestsForEmployeeAsync(string userId)
        {
            return await _context.LeaveRequests
                .Where(lr => lr.UserId == userId)
                .OrderByDescending(lr => lr.CreatedAt)
                .ToListAsync();
        }

        // Get leave requests for a specific manager
        public async Task<List<LeaveRequest>> GetLeaveRequestsForManagerAsync(string managerId)
        {
            return await _context.LeaveRequests
                .Where(lr => lr.ManagerId == managerId || lr.Status == "Pending")
                .OrderByDescending(lr => lr.CreatedAt)
                .ToListAsync();
        }
    }
}

LeaveRequestController - Exposing API Endpoints

The LeaveRequestController handles the routes for applying for leave, approving/rejecting leave requests, and fetching leave requests for both employees and managers.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using lms.DTO;
using lms.Services;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;

namespace lms.Controller
{
    [Route("api/[controller]")]
    [ApiController]
    public class LeaveRequestController : ControllerBase
    {
        private readonly LeaveRequestService _leaveRequestService;

        public LeaveRequestController(LeaveRequestService leaveRequestService)
        {
            _leaveRequestService = leaveRequestService;
        }

        // POST: api/leaverequest/apply
        [Authorize]
        [HttpPost("apply")]
        public async Task<IActionResult> ApplyForLeave([FromBody] LeaveRequestCreateDto leaveRequestDto)
        {
            var userId = User.FindFirst("sub")?.Value; // Get employee ID from JWT claims
            if (string.IsNullOrEmpty(userId))
            {
                return Unauthorized("User not found.");
            }
            
            var leaveRequest = await _leaveRequestService.CreateLeaveRequestAsync(userId, leaveRequestDto);
            return Ok(leaveRequest);
        }

        // POST: api/leaverequest/approve/{id}
        [Authorize(Roles = "Manager")]
        [HttpPost("approve/{id}")]
        public async Task<IActionResult> ApproveLeave(int id)
        {
            var managerId = User.FindFirst("sub")?.Value; // Get manager ID from JWT claims
            if (string.IsNullOrEmpty(managerId))
            {
                return Unauthorized("Manager not found.");
            }

            var leaveRequest = await _leaveRequestService.ApproveLeaveRequestAsync(id, managerId);
            return Ok(leaveRequest);
        }

        // POST: api/leaverequest/reject/{id}
        [Authorize(Roles = "Manager")]
        [HttpPost("reject/{id}")]
        public async Task<IActionResult> RejectLeave(int id)
        {
            var managerId = User.FindFirst("sub")?.Value; // Get manager ID from JWT claims
            if (string.IsNullOrEmpty(managerId))
            {
                return Unauthorized("Manager not found.");
            }

            var leaveRequest = await _leaveRequestService.RejectLeaveRequestAsync(id, managerId);
            return Ok(leaveRequest);
        }

        // GET: api/leaverequest/myrequests
        [Authorize]
        [HttpGet("myrequests")]
        public async Task<IActionResult> GetMyLeaveRequests()
        {
            var userId = User.FindFirst("sub")?.Value; // Get employee ID from JWT claims
            if (string.IsNullOrEmpty(userId))
            {
                return Unauthorized("User not found.");
            }

            var leaveRequests = await _leaveRequestService.GetLeaveRequestsForEmployeeAsync(userId);
            return Ok(leaveRequests);
        }

        // GET: api/leaverequest/teamrequests
        [Authorize(Roles = "Manager")]
        [HttpGet("teamrequests")]
        public async Task<IActionResult> GetTeamLeaveRequests()
        {
            var managerId = User.FindFirst("sub")?.Value; // Get manager ID from JWT claims
            if (string.IsNullOrEmpty(managerId))
            {
                return Unauthorized("Manager not found.");
            }

            var leaveRequests = await _leaveRequestService.GetLeaveRequestsForManagerAsync(managerId);
            return Ok(leaveRequests);
        }
    }
}

LeaveRequest Model - Ensure Correct DateTime Handling

The LeaveRequest model defines the structure of the leave request and ensures the use of UTC times.

using System;

namespace lms.Models
{
    public class LeaveRequest
    {
        public int Id { get; set; }

        public string UserId { get; set; }  // FK to ApplicationUser (Employee)
        public ApplicationUser User { get; set; }  // Navigation property to ApplicationUser

        public int LeaveTypeId { get; set; }  // FK to LeaveType
        public LeaveType LeaveType { get; set; }  // Navigation property to LeaveType

        public DateTime StartDate { get; set; } = DateTime.UtcNow;  // UTC time for the leave start date
        public DateTime EndDate { get; set; } = DateTime.UtcNow;  // UTC time for the leave end date

        public int TotalDays { get; set; }  // Total number of leave days requested

        public string Reason { get; set; }  // Reason for leave

        public string Status { get; set; }  // Pending, Approved, Rejected, Canceled

        public string ManagerId { get; set; }  // FK to ApplicationUser (Manager)
        public ApplicationUser Manager { get; set; }  // Navigation property to Manager

        public DateTime? DecisionDate { get; set; } = DateTime.UtcNow;  // UTC time for decision date

        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;  // UTC time for when the leave request was created
    }
}

Summary:

The ManagerId is set to null initially, and it can be assigned later when the manager approves or rejects the leave request.

Ensure that the ManagerId is assigned appropriately either at the creation of the leave request or during the approval/rejection process.

The DateTime properties are set to DateTime.UtcNow to ensure that all timestamps are stored in UTC format in the database.


Let me know if you have further questions or need more assistance!

