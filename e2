Microsoft.EntityFrameworkCore.DbUpdateException: An error occurred while saving the entity changes. See the inner exception for details.
 ---> Npgsql.PostgresException (0x80004005): 23502: null value in column "UserId" of relation "LeaveRequests" violates not-null constraint

DETAIL: Detail redacted as it may contain sensitive data. Specify 'Include Error Detail' in the connection string to include this information.
   at Npgsql.Internal.NpgsqlConnector.ReadMessageLong(Boolean async, DataRowLoadingMode dataRowLoadingMode, Boolean readingNotifications, Boolean isReadingPrependedMessage)
   at System.Runtime.CompilerServices.PoolingAsyncValueTaskMethodBuilder`1.StateMachineBox`1.System.Threading.Tasks.Sources.IValueTaskSource<TResult>.GetResult(Int16 token)


Sure! Here's a complete setup to ensure your JWT authentication, claim extraction, and leave request creation are working correctly. This includes:

Token-based auth

Correct claim extraction

Error handling for missing claims



---

Controller (LeaveRequestController.cs)

using System.Security.Claims;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using lms.DTO;
using lms.Services;

namespace lms.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class LeaveRequestController : ControllerBase
    {
        private readonly LeaveRequestService _leaveRequestService;

        public LeaveRequestController(LeaveRequestService leaveRequestService)
        {
            _leaveRequestService = leaveRequestService;
        }

        [Authorize]
        [HttpPost("apply")]
        public async Task<IActionResult> ApplyForLeave([FromBody] LeaveRequestCreateDto leaveRequestDto)
        {
            var userId = User.FindFirst(ClaimTypes.NameIdentifier)?.Value 
                      ?? User.FindFirst("sub")?.Value;

            if (string.IsNullOrEmpty(userId))
                return Unauthorized("User ID not found in token claims.");

            var leaveRequest = await _leaveRequestService.CreateLeaveRequestAsync(userId, leaveRequestDto);
            return Ok(leaveRequest);
        }

        [Authorize(Roles = "Manager")]
        [HttpPost("approve/{id}")]
        public async Task<IActionResult> ApproveLeave(int id)
        {
            var managerId = User.FindFirst(ClaimTypes.NameIdentifier)?.Value 
                         ?? User.FindFirst("sub")?.Value;

            if (string.IsNullOrEmpty(managerId))
                return Unauthorized("Manager ID not found in token claims.");

            var leaveRequest = await _leaveRequestService.ApproveLeaveRequestAsync(id, managerId);
            return Ok(leaveRequest);
        }

        [Authorize(Roles = "Manager")]
        [HttpPost("reject/{id}")]
        public async Task<IActionResult> RejectLeave(int id)
        {
            var managerId = User.FindFirst(ClaimTypes.NameIdentifier)?.Value 
                         ?? User.FindFirst("sub")?.Value;

            if (string.IsNullOrEmpty(managerId))
                return Unauthorized("Manager ID not found in token claims.");

            var leaveRequest = await _leaveRequestService.RejectLeaveRequestAsync(id, managerId);
            return Ok(leaveRequest);
        }

        [Authorize]
        [HttpGet("myrequests")]
        public async Task<IActionResult> GetMyLeaveRequests()
        {
            var userId = User.FindFirst(ClaimTypes.NameIdentifier)?.Value 
                      ?? User.FindFirst("sub")?.Value;

            if (string.IsNullOrEmpty(userId))
                return Unauthorized("User ID not found in token claims.");

            var leaveRequests = await _leaveRequestService.GetLeaveRequestsForEmployeeAsync(userId);
            return Ok(leaveRequests);
        }

        [Authorize(Roles = "Manager")]
        [HttpGet("teamrequests")]
        public async Task<IActionResult> GetTeamLeaveRequests()
        {
            var managerId = User.FindFirst(ClaimTypes.NameIdentifier)?.Value 
                         ?? User.FindFirst("sub")?.Value;

            if (string.IsNullOrEmpty(managerId))
                return Unauthorized("Manager ID not found in token claims.");

            var leaveRequests = await _leaveRequestService.GetLeaveRequestsForManagerAsync(managerId);
            return Ok(leaveRequests);
        }
    }
}


---

Model (LeaveRequest.cs) â€“ Make sure all dates are UTC

public class LeaveRequest
{
    public int Id { get; set; }

    public string UserId { get; set; }
    public ApplicationUser User { get; set; }

    public int LeaveTypeId { get; set; }
    public LeaveType LeaveType { get; set; }

    public DateTime StartDate { get; set; } = DateTime.UtcNow;
    public DateTime EndDate { get; set; } = DateTime.UtcNow;
    public int TotalDays { get; set; }
    public string Reason { get; set; }
    public string Status { get; set; }

    public string ManagerId { get; set; }
    public ApplicationUser Manager { get; set; }

    public DateTime? DecisionDate { get; set; } = DateTime.UtcNow;
    public DateTime CreatedAt { get; set; } = DateTime.UtcNow;
}


---

DTO (LeaveRequestCreateDto.cs)

public class LeaveRequestCreateDto
{
    public int LeaveTypeId { get; set; }
    public DateTime StartDate { get; set; }
    public DateTime EndDate { get; set; }
    public string Reason { get; set; }
}


---

JWT Token Setup (Startup/Program.cs)

Make sure this is added in your Program.cs or Startup.cs:

builder.Services.AddAuthentication("Bearer")
    .AddJwtBearer("Bearer", options =>
    {
        options.TokenValidationParameters = new TokenValidationParameters
        {
            ValidateIssuer = true,
            ValidateAudience = true,
            ValidateLifetime = true,
            ValidateIssuerSigningKey = true,
            ValidIssuer = "your_issuer",
            ValidAudience = "your_audience",
            IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes("your_secret_key"))
        };
    });

builder.Services.AddAuthorization();

app.UseAuthentication();
app.UseAuthorization();


---

Let me know if you want to test the JWT or need help creating one during login.

