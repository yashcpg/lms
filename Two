Great! Now that we have the models, let's move on to Step 2: Setting up the DbContext.

Step 2: Create the DbContext

The DbContext is the bridge between your application and the PostgreSQL database. It allows you to interact with the database using Entity Framework Core. We'll configure it to include the models we defined earlier.


---

a. Create the ApplicationDbContext Class

First, let's create the ApplicationDbContext class. This will inherit from IdentityDbContext to support user authentication and authorization via ASP.NET Core Identity, and it will also include DbSets for the models we've defined.

using Microsoft.AspNetCore.Identity.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore;

public class ApplicationDbContext : IdentityDbContext<ApplicationUser>
{
    public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options)
        : base(options)
    {
    }

    // DbSets for the entities
    public DbSet<LeaveType> LeaveTypes { get; set; }
    public DbSet<LeaveBalance> LeaveBalances { get; set; }
    public DbSet<LeaveRequest> LeaveRequests { get; set; }
    public DbSet<Notification> Notifications { get; set; }

    // Override OnModelCreating to configure any relationships, etc.
    protected override void OnModelCreating(ModelBuilder builder)
    {
        base.OnModelCreating(builder);

        // Configure relationships and constraints here

        // Example: LeaveRequest -> User (Employee) and Manager relationship
        builder.Entity<LeaveRequest>()
            .HasOne(lr => lr.User)
            .WithMany()
            .HasForeignKey(lr => lr.UserId)
            .OnDelete(DeleteBehavior.Restrict);  // Prevent cascade delete

        builder.Entity<LeaveRequest>()
            .HasOne(lr => lr.Manager)
            .WithMany()
            .HasForeignKey(lr => lr.ManagerId)
            .OnDelete(DeleteBehavior.Restrict);  // Prevent cascade delete

        builder.Entity<LeaveBalance>()
            .HasOne(lb => lb.User)
            .WithMany()
            .HasForeignKey(lb => lb.UserId)
            .OnDelete(DeleteBehavior.Cascade);  // Cascade delete for leave balances

        builder.Entity<LeaveBalance>()
            .HasOne(lb => lb.LeaveType)
            .WithMany()
            .HasForeignKey(lb => lb.LeaveTypeId)
            .OnDelete(DeleteBehavior.Cascade);  // Cascade delete for leave types

        builder.Entity<LeaveType>()
            .HasIndex(lt => lt.Name)
            .IsUnique();  // Ensure leave type names are unique
    }
}


---

b. Explanation of the DbContext

1. IdentityDbContext<ApplicationUser>:
We inherit from IdentityDbContext<ApplicationUser> so that ASP.NET Core Identity is integrated, allowing us to handle user authentication and authorization. The ApplicationUser class will be used as the user entity for Identity, which includes authentication and role-based access control.


2. DbSets:
Each model (entity) has a corresponding DbSet. This is how Entity Framework Core knows to create a table for each model in the PostgreSQL database.

DbSet<LeaveType> LeaveTypes: This will represent the LeaveTypes table in the database.

DbSet<LeaveBalance> LeaveBalances: This will represent the LeaveBalances table.

DbSet<LeaveRequest> LeaveRequests: This will represent the LeaveRequests table.

DbSet<Notification> Notifications: This will represent the Notifications table.



3. OnModelCreating:

This method is used to configure the relationships between entities using Fluent API. It ensures that constraints, cascading behaviors, and relationships are correctly set up.

We explicitly configure the one-to-many relationship between LeaveRequest and User (Employee), as well as the relationship between LeaveRequest and Manager.

We also define cascade delete behaviors for the relationships involving LeaveBalance and LeaveType.

We ensure that the LeaveType.Name is unique by adding an index.





---

c. Configure the Database Connection in appsettings.json

In your appsettings.json, add the connection string to your PostgreSQL database. Make sure to replace the placeholder values with your actual database credentials.

{
  "ConnectionStrings": {
    "DefaultConnection": "Host=localhost;Port=5432;Database=LMS;Username=yourusername;Password=yourpassword"
  },
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft": "Warning",
      "Microsoft.Hosting.Lifetime": "Information"
    }
  },
  "AllowedHosts": "*"
}


---

d. Register the DbContext in Startup.cs or Program.cs (depending on .NET version)

Now, let's register the ApplicationDbContext with the Dependency Injection (DI) container in your Startup.cs (or Program.cs in .NET 6+).

public class Startup
{
    public IConfiguration Configuration { get; }
    
    public Startup(IConfiguration configuration)
    {
        Configuration = configuration;
    }
    
    public void ConfigureServices(IServiceCollection services)
    {
        services.AddDbContext<ApplicationDbContext>(options =>
            options.UseNpgsql(Configuration.GetConnectionString("DefaultConnection")));
        
        // Register Identity and other services
        services.AddIdentity<ApplicationUser, IdentityRole>()
            .AddEntityFrameworkStores<ApplicationDbContext>()
            .AddDefaultTokenProviders();

        // Add other services like controllers, etc.
        services.AddControllers();
        
        // Add Swagger for API documentation
        services.AddSwaggerGen();
    }

    public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
    {
        if (env.IsDevelopment())
        {
            app.UseDeveloperExceptionPage();
        }

        // Enable Swagger
        app.UseSwagger();
        app.UseSwaggerUI(c => c.SwaggerEndpoint("/swagger/v1/swagger.json", "LMS API v1"));

        // Use authentication and authorization middleware
        app.UseAuthentication();
        app.UseAuthorization();

        app.UseEndpoints(endpoints =>
        {
            endpoints.MapControllers();
        });
    }
}

We use UseNpgsql() to configure PostgreSQL as the database provider.

AddIdentity<ApplicationUser, IdentityRole>(): This sets up ASP.NET Core Identity for user authentication, including registration and role management.

Don't forget to add the necessary using directives at the top of the file for Microsoft.EntityFrameworkCore and Npgsql.EntityFrameworkCore.PostgreSQL.



---

3. Next Steps:

Once the DbContext is set up, you can now run the database migration to create the tables in PostgreSQL.

1. Install Entity Framework Core Tools (if you haven't done so already):

dotnet tool install --global dotnet-ef


2. Add a migration to generate the database schema:

dotnet ef migrations add InitialCreate


3. Apply the migration to create the tables in the database:

dotnet ef database update




---

Let me know if you'd like to proceed with migrations, or if you need further clarification on any part of the DbContext setup!
