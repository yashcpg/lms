using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using lms.DTO;
using lms.Services;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;

namespace lms.Controller
{
    [Route("api/[controller]")]
    [ApiController]
    public class LeaveRequestController : ControllerBase
    {
        private readonly LeaveRequestService _leaveRequestService;

        public LeaveRequestController(LeaveRequestService leaveRequestService)
        {
            _leaveRequestService = leaveRequestService;
        }

        // POST: api/leaverequest/apply
        [Authorize]
        [HttpPost("apply")]
        public async Task<IActionResult> ApplyForLeave([FromBody] LeaveRequestCreateDto leaveRequestDto)
        {
            var userId = User.FindFirst("sub")?.Value; // Get employee ID from JWT claims
            if (string.IsNullOrEmpty(userId))
            {
                return Unauthorized("User not found.");
            }
            
            var leaveRequest = await _leaveRequestService.CreateLeaveRequestAsync(userId, leaveRequestDto);
            return Ok(leaveRequest);
        }

        // POST: api/leaverequest/approve/{id}
        [Authorize(Roles = "Manager")]
        [HttpPost("approve/{id}")]
        public async Task<IActionResult> ApproveLeave(int id)
        {
            var managerId = User.FindFirst("sub")?.Value; // Get manager ID from JWT claims
            if (string.IsNullOrEmpty(managerId))
            {
                return Unauthorized("Manager not found.");
            }

            var leaveRequest = await _leaveRequestService.ApproveLeaveRequestAsync(id, managerId);
            return Ok(leaveRequest);
        }

        // POST: api/leaverequest/reject/{id}
        [Authorize(Roles = "Manager")]
        [HttpPost("reject/{id}")]
        public async Task<IActionResult> RejectLeave(int id)
        {
            var managerId = User.FindFirst("sub")?.Value; // Get manager ID from JWT claims
            if (string.IsNullOrEmpty(managerId))
            {
                return Unauthorized("Manager not found.");
            }

            var leaveRequest = await _leaveRequestService.RejectLeaveRequestAsync(id, managerId);
            return Ok(leaveRequest);
        }

        // GET: api/leaverequest/myrequests
        [Authorize]
        [HttpGet("myrequests")]
        public async Task<IActionResult> GetMyLeaveRequests()
        {
            var userId = User.FindFirst("sub")?.Value; // Get employee ID from JWT claims
            if (string.IsNullOrEmpty(userId))
            {
                return Unauthorized("User not found.");
            }

            var leaveRequests = await _leaveRequestService.GetLeaveRequestsForEmployeeAsync(userId);
            return Ok(leaveRequests);
        }

        // GET: api/leaverequest/teamrequests
        [Authorize(Roles = "Manager")]
        [HttpGet("teamrequests")]
        public async Task<IActionResult> GetTeamLeaveRequests()
        {
            var managerId = User.FindFirst("sub")?.Value; // Get manager ID from JWT claims
            if (string.IsNullOrEmpty(managerId))
            {
                return Unauthorized("Manager not found.");
            }

            var leaveRequests = await _leaveRequestService.GetLeaveRequestsForManagerAsync(managerId);
            return Ok(leaveRequests);
        }
    }
}

Code	Details
401
Undocumented
Error: Unauthorized

Response body
Download
User not found.
