You're correct! The LeaveRequest model I initially provided is a simplified version, and you've shared a more detailed version with additional fields, including the manager, decision date, and leave type. The more detailed version is definitely better for a full-fledged Leave Management System, as it captures more information about each leave request.

Let me walk through the differences and explain how this updated LeaveRequest model can be used, and how we can update the code accordingly to fit this model.

Updated LeaveRequest Model:

public class LeaveRequest
{
    public int Id { get; set; }

    public string UserId { get; set; }  // FK to ApplicationUser (Employee)
    public ApplicationUser User { get; set; }  // Navigation property to ApplicationUser
    
    public int LeaveTypeId { get; set; }  // FK to LeaveType
    public LeaveType LeaveType { get; set; }  // Navigation property to LeaveType
    
    public DateTime StartDate { get; set; }
    public DateTime EndDate { get; set; }
    
    public int TotalDays { get; set; }  // Total number of leave days requested
    
    public string Reason { get; set; }  // Reason for leave
    
    public string Status { get; set; }  // Pending, Approved, Rejected, Canceled
    
    public string ManagerId { get; set; }  // FK to ApplicationUser (Manager)
    public ApplicationUser Manager { get; set; }  // Navigation property to Manager
    
    public DateTime? DecisionDate { get; set; }  // Date when the manager approved/rejected the leave request
    
    public DateTime CreatedAt { get; set; }  // Date when the leave request was created
}

Changes to Consider:

1. UserId and ManagerId:

UserId: Refers to the employee (user) applying for leave.

ManagerId: Refers to the manager who will approve or reject the leave request.

These should be foreign keys (FK) to the ApplicationUser table, which is your user model in Identity.



2. LeaveType:

You added a reference to LeaveType (with LeaveTypeId). This means you will need a LeaveType model that defines various leave types (e.g., Sick Leave, Casual Leave, etc.). The LeaveType model would likely have an Id and a Name property.



3. TotalDays:

This is an important field to store how many days the employee is requesting off, which can be computed by the system based on the StartDate and EndDate. This will be calculated either during the request creation process or updated when the leave request is approved.



4. Status:

This tracks the current status of the leave request (Pending, Approved, Rejected, Canceled).



5. DecisionDate:

This date tracks when the manager made a decision (approved or rejected the leave). It is nullable because it won’t be set until a decision is made.



6. CreatedAt:

This stores the timestamp of when the leave request was created.




Adjusting the Code to Match the New LeaveRequest Model:

Given these changes, here's how you can adjust the code for the LeaveRequestService and the LeaveRequestController to incorporate the new fields.

1. Update the LeaveRequestService:

Let's update the service to reflect the new properties, especially the TotalDays calculation and adding the manager's decision date.

public class LeaveRequestService
{
    private readonly ApplicationDbContext _context;

    public LeaveRequestService(ApplicationDbContext context)
    {
        _context = context;
    }

    // Create a new leave request
    public async Task<LeaveRequest> CreateLeaveRequestAsync(string userId, LeaveRequestCreateDto leaveRequestDto)
    {
        // Check if the leave dates are in the future
        if (leaveRequestDto.StartDate < DateTime.Now)
        {
            throw new InvalidOperationException("Cannot apply for leave in the past.");
        }

        var leaveRequest = new LeaveRequest
        {
            UserId = userId,
            LeaveTypeId = leaveRequestDto.LeaveTypeId, // We need LeaveTypeId here
            StartDate = leaveRequestDto.StartDate,
            EndDate = leaveRequestDto.EndDate,
            Reason = leaveRequestDto.Reason,
            Status = "Pending",
            CreatedAt = DateTime.Now,
            TotalDays = (leaveRequestDto.EndDate - leaveRequestDto.StartDate).Days + 1  // Calculating total leave days
        };

        _context.LeaveRequests.Add(leaveRequest);
        await _context.SaveChangesAsync();

        return leaveRequest;
    }

    // Approve leave request
    public async Task<LeaveRequest> ApproveLeaveRequestAsync(int leaveRequestId, string managerId)
    {
        var leaveRequest = await _context.LeaveRequests.FindAsync(leaveRequestId);

        if (leaveRequest == null)
        {
            throw new ArgumentException("Leave request not found");
        }

        if (leaveRequest.Status != "Pending")
        {
            throw new InvalidOperationException("Only pending requests can be approved.");
        }

        leaveRequest.Status = "Approved";
        leaveRequest.ManagerId = managerId;  // Set the manager who approved
        leaveRequest.DecisionDate = DateTime.Now;  // Set the decision date

        await _context.SaveChangesAsync();

        return leaveRequest;
    }

    // Reject leave request
    public async Task<LeaveRequest> RejectLeaveRequestAsync(int leaveRequestId, string managerId)
    {
        var leaveRequest = await _context.LeaveRequests.FindAsync(leaveRequestId);

        if (leaveRequest == null)
        {
            throw new ArgumentException("Leave request not found");
        }

        if (leaveRequest.Status != "Pending")
        {
            throw new InvalidOperationException("Only pending requests can be rejected.");
        }

        leaveRequest.Status = "Rejected";
        leaveRequest.ManagerId = managerId;  // Set the manager who rejected
        leaveRequest.DecisionDate = DateTime.Now;  // Set the decision date

        await _context.SaveChangesAsync();

        return leaveRequest;
    }
}

2. Update the LeaveRequestController:

Now, let's modify the controller to handle the new fields and logic, including approval/rejection by the manager and sending responses accordingly.

[Route("api/[controller]")]
[ApiController]
public class LeaveRequestController : ControllerBase
{
    private readonly LeaveRequestService _leaveRequestService;

    public LeaveRequestController(LeaveRequestService leaveRequestService)
    {
        _leaveRequestService = leaveRequestService;
    }

    // POST: api/leaverequest/apply
    [Authorize]
    [HttpPost("apply")]
    public async Task<IActionResult> ApplyForLeave([FromBody] LeaveRequestCreateDto leaveRequestDto)
    {
        var userId = User.FindFirst("sub")?.Value; // Get employee ID from JWT claims
        var leaveRequest = await _leaveRequestService.CreateLeaveRequestAsync(userId, leaveRequestDto);
        return Ok(leaveRequest);
    }

    // POST: api/leaverequest/approve/{id}
    [Authorize(Roles = "Manager")]
    [HttpPost("approve/{id}")]
    public async Task<IActionResult> ApproveLeave(int id)
    {
        var managerId = User.FindFirst("sub")?.Value; // Get manager ID from JWT claims
        var leaveRequest = await _leaveRequestService.ApproveLeaveRequestAsync(id, managerId);
        return Ok(leaveRequest);
    }

    // POST: api/leaverequest/reject/{id}
    [Authorize(Roles = "Manager")]
    [HttpPost("reject/{id}")]
    public async Task<IActionResult> RejectLeave(int id)
    {
        var managerId = User.FindFirst("sub")?.Value; // Get manager ID from JWT claims
        var leaveRequest = await _leaveRequestService.RejectLeaveRequestAsync(id, managerId);
        return Ok(leaveRequest);
    }

    // GET: api/leaverequest/myrequests
    [Authorize]
    [HttpGet("myrequests")]
    public async Task<IActionResult> GetMyLeaveRequests()
    {
        var userId = User.FindFirst("sub")?.Value; // Get employee ID from JWT claims
        var leaveRequests = await _leaveRequestService.GetLeaveRequestsForEmployeeAsync(userId);
        return Ok(leaveRequests);
    }

    // GET: api/leaverequest/teamrequests
    [Authorize(Roles = "Manager")]
    [HttpGet("teamrequests")]
    public async Task<IActionResult> GetTeamLeaveRequests()
    {
        var managerId = User.FindFirst("sub")?.Value; // Get manager ID from JWT claims
        var leaveRequests = await _leaveRequestService.GetLeaveRequestsForManagerAsync(managerId);
        return Ok(leaveRequests);
    }
}

3. LeaveType Model:

Since LeaveRequest now has a LeaveTypeId, we need to create the LeaveType model. This model will represent the different types of leave (e.g., Sick Leave, Casual Leave).

public class LeaveType
{
    public int Id { get; set; }
    public string Name { get; set; }  // Name of the leave type (e.g., Sick Leave, Casual Leave)
}

4. Update Database:

Since we’ve added new properties and relationships (like LeaveTypeId and ManagerId), don’t forget to generate a new migration and update the database.

dotnet ef migrations add AddLeaveTypeAndManagerToLeaveRequest
dotnet ef database update

Next Steps:

1. Testing the Leave Request Management System:

Test the leave application process for employees.

Test the approval/rejection process for managers.



2. Implement Leave Balance Management: Track and update the leave balance for employees when a leave is approved.



Let me know if you'd like to continue with any of these next steps, or if you have questions on any of the steps we've covered!
